import Mathlib.MeasureTheory.Integral.IntegrableOn


noncomputable section

open Set Filter TopologicalSpace MeasureTheory Function

open scoped Topology Interval Filter ENNReal MeasureTheory

section

variable {Œ± E F : Type*} [NormedAddCommGroup E] {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {a : Œ±} {l : Filter Œ±}

variable [MeasurableSpace Œ±] [NormedAddCommGroup F] {Œº : Measure Œ±}

@[simp]
theorem integrableAtFilter_principal_iff {S : Set Œ±} :
  IntegrableAtFilter f (ùìü S) Œº ‚Üî IntegrableOn f S Œº := by
  rw [IntegrableAtFilter]
  simp only [mem_principal]
  refine ‚ü®fun ‚ü®s, hsS, hfs‚ü© ‚Ü¶ hfs.mono hsS le_rfl, fun h ‚Ü¶ ‚ü®S, le_rfl, h‚ü©‚ü©


end

end
