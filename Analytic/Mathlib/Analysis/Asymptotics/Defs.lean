import Mathlib.Analysis.Asymptotics.Defs

open Set Topology Filter NNReal

namespace Asymptotics

variable {Œ± : Type*} {Œ≤ : Type*} {E : Type*} {F : Type*} {G : Type*} {E' : Type*}
  {F' : Type*} {G' : Type*} {E'' : Type*} {F'' : Type*} {G'' : Type*} {E''' : Type*}
  {R : Type*} {R' : Type*} {ùïú : Type*} {ùïú' : Type*}

variable [Norm E] [Norm F] [Norm G]
variable [SeminormedAddCommGroup E'] [SeminormedAddCommGroup F'] [SeminormedAddCommGroup G']
  [NormedAddCommGroup E''] [NormedAddCommGroup F''] [NormedAddCommGroup G''] [SeminormedRing R]
  [SeminormedAddGroup E''']
  [SeminormedRing R']

variable [NormedDivisionRing ùïú] [NormedDivisionRing ùïú']
variable {c c' c‚ÇÅ c‚ÇÇ : ‚Ñù} {f : Œ± ‚Üí E} {g : Œ± ‚Üí F} {k : Œ± ‚Üí G}
variable {f' : Œ± ‚Üí E'} {g' : Œ± ‚Üí F'} {k' : Œ± ‚Üí G'}
variable {f'' : Œ± ‚Üí E''} {g'' : Œ± ‚Üí F''} {k'' : Œ± ‚Üí G''}
variable {l l' : Filter Œ±}
variable {f‚ÇÅ f‚ÇÇ : Œ± ‚Üí E'} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí F'}

-- https://github.com/leanprover-community/mathlib4/pull/23059

theorem IsBigO.add_iff_left (h‚ÇÇ : f‚ÇÇ =O[l] g) : (fun x => f‚ÇÅ x + f‚ÇÇ x) =O[l] g ‚Üî (f‚ÇÅ =O[l] g):=
  ‚ü®fun h ‚Ü¶ h.sub h‚ÇÇ |>.congr (fun _ ‚Ü¶ add_sub_cancel_right _ _) (fun _ ‚Ü¶ rfl), fun h ‚Ü¶ h.add h‚ÇÇ‚ü©

theorem IsBigO.add_iff_right (h‚ÇÅ : f‚ÇÅ =O[l] g) : (fun x => f‚ÇÅ x + f‚ÇÇ x) =O[l] g ‚Üî (f‚ÇÇ =O[l] g):=
  ‚ü®fun h ‚Ü¶ h.sub h‚ÇÅ |>.congr (fun _ ‚Ü¶ (eq_sub_of_add_eq' rfl).symm) (fun _ ‚Ü¶ rfl), fun h ‚Ü¶ h‚ÇÅ.add h‚ü©

theorem IsLittleO.add_iff_left (h‚ÇÇ : f‚ÇÇ =o[l] g) : (fun x => f‚ÇÅ x + f‚ÇÇ x) =o[l] g ‚Üî (f‚ÇÅ =o[l] g):=
  ‚ü®fun h ‚Ü¶ h.sub h‚ÇÇ |>.congr (fun _ ‚Ü¶ add_sub_cancel_right _ _) (fun _ ‚Ü¶ rfl), fun h ‚Ü¶ h.add h‚ÇÇ‚ü©

theorem IsLittleO.add_iff_right (h‚ÇÅ : f‚ÇÅ =o[l] g) : (fun x => f‚ÇÅ x + f‚ÇÇ x) =o[l] g ‚Üî (f‚ÇÇ =o[l] g):=
  ‚ü®fun h ‚Ü¶ h.sub h‚ÇÅ |>.congr (fun _ ‚Ü¶ (eq_sub_of_add_eq' rfl).symm) (fun _ ‚Ü¶ rfl), fun h ‚Ü¶ h‚ÇÅ.add h‚ü©

theorem IsBigO.sub_iff_left (h‚ÇÇ : f‚ÇÇ =O[l] g) : (fun x => f‚ÇÅ x - f‚ÇÇ x) =O[l] g ‚Üî (f‚ÇÅ =O[l] g):=
  ‚ü®fun h ‚Ü¶ h.add h‚ÇÇ |>.congr (fun _ ‚Ü¶ sub_add_cancel ..) (fun _ ‚Ü¶ rfl), fun h ‚Ü¶ h.sub h‚ÇÇ‚ü©

theorem IsBigO.sub_iff_right (h‚ÇÅ : f‚ÇÅ =O[l] g) : (fun x => f‚ÇÅ x - f‚ÇÇ x) =O[l] g ‚Üî (f‚ÇÇ =O[l] g):=
  ‚ü®fun h ‚Ü¶ h‚ÇÅ.sub h |>.congr (fun _ ‚Ü¶ sub_sub_self ..) (fun _ ‚Ü¶ rfl), fun h ‚Ü¶ h‚ÇÅ.sub h‚ü©

theorem IsLittleO.sub_iff_left (h‚ÇÇ : f‚ÇÇ =o[l] g) : (fun x => f‚ÇÅ x - f‚ÇÇ x) =o[l] g ‚Üî (f‚ÇÅ =o[l] g):=
  ‚ü®fun h ‚Ü¶ h.add h‚ÇÇ |>.congr (fun _ ‚Ü¶ sub_add_cancel ..) (fun _ ‚Ü¶ rfl), fun h ‚Ü¶ h.sub h‚ÇÇ‚ü©

theorem IsLittleO.sub_iff_right (h‚ÇÅ : f‚ÇÅ =o[l] g) : (fun x => f‚ÇÅ x - f‚ÇÇ x) =o[l] g ‚Üî (f‚ÇÇ =o[l] g):=
  ‚ü®fun h ‚Ü¶ h‚ÇÅ.sub h |>.congr (fun _ ‚Ü¶ sub_sub_self ..) (fun _ ‚Ü¶ rfl), fun h ‚Ü¶ h‚ÇÅ.sub h‚ü©
end Asymptotics
